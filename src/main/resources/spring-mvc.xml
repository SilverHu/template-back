<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 只注入controller，springMVC加载配置文件产生的是子容器 -->
	<!-- 加载controller并未加载service，事物未失效，如果此时加载了service，事物无法对service进行拦截，故会失效 -->
	<context:component-scan base-package="com" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>
	
	<!-- 配置Fastjson支持 -->
	<mvc:annotation-driven conversion-service="conversionService">
		<mvc:message-converters register-defaults="true">
			<bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
				<property name="supportedMediaTypes" value="text/html;charset=UTF-8" />
				<property name="features">
					<array>
						<value>WriteMapNullValue</value>
						<value>WriteNullStringAsEmpty</value>
					</array>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
	
	<bean id="conversionService"
         class="org.springframework.format.support.FormattingConversionServiceFactoryBean">        
	</bean>
	
	<bean id="fmXmlEscape" class="freemarker.template.utility.XmlEscape" />
	
	<bean id="freemarkerConfig" class="com.framework.shiro.ShiroTagFreeMarkerConfigurer">  
	    <property name="templateLoaderPath" value="/WEB-INF/ftl" />  
	    <property name="freemarkerSettings">  
	        <props>  
	            <prop key="template_update_delay">${template_update_delay}</prop>  
	            <prop key="default_encoding">UTF-8</prop>
	            <prop key="locale">zh_CN</prop>
	            <prop key="number_format">#.##########</prop>  
	            <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
	            <prop key="datetime_format">yyyy-MM-dd</prop><!-- 时间格式化 -->
        		<prop key="date_format">yyyy-MM-dd</prop>
	            <prop key="classic_compatible">true</prop>  
	            <prop key="template_exception_handler">ignore</prop>
	            <prop key="auto_import">
	            	macro/layout.ftl as layout,
	            	macro/style.ftl as style
	            </prop>
	        </props>  
	    </property> 
	    <property name="freemarkerVariables">
	        <map>
	            <entry key="xml_escape" value-ref="fmXmlEscape" />
	        </map>
	    </property> 
	</bean> 
	
	<!-- 配置freeMarker视图解析器 -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<property name="cache" value="true" />
        <property name="prefix" value="" /><!-- 上面已经配了，这里就不用配啦 -->
        <property name="suffix" value=".ftl" />
        <property name="contentType" value="text/html;charset=UTF-8" />
        <property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView" />
        <property name="allowSessionOverride" value="true" />
        <property name="allowRequestOverride" value="true" />
        <property name="exposeSpringMacroHelpers" value="false" />
        <property name="exposeRequestAttributes" value="true" />
        <property name="exposeSessionAttributes" value="true" />
        <property name="requestContextAttribute" value="request" /> 
	</bean>
     
	<!-- <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean> -->
	
	<!-- 容器默认的DefaultServletHandler处理 所有静态内容与无RequestMapping处理的URL -->
	<mvc:default-servlet-handler />

	<!-- SpringMVC上传文件时,需配置MultipartResolver处理器 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="80000000" />
		<property name="defaultEncoding" value="UTF-8"></property>
	</bean>
	
	<!-- SpringMVC在超出上传文件限制时,会抛出org.springframework.web.multipart.MaxUploadSizeExceededException -->
	<!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的,而且此时还没有进入到Controller方法中 -->
	<bean id="exceptionResolver"
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<!-- <prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">error_fileupload</prop> -->
			</props>
		</property>
	</bean>

</beans>
